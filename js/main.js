"use strict";function createStartElement(){controlElements=[{type:"start",top:0,left:0,right:canvas.width,bottom:canvas.width-20}]}function createPauseElement(){controlElements=[{type:"pause",top:0,left:0,right:canvas.width,bottom:canvas.width-20}]}function canvasStartState(){video.width=canvas.width=video.offsetWidth,video.height=canvas.height=video.offsetHeight;var t=canvas.getContext("2d");drawBackground(t,"black"),drawCenterPlayButton(t,"white")}function grayAndGrain(t){for(var o=t.data,a=void 0,e=0;e<o.length;e+=4){a=Math.random()+1;var n=o[e],i=o[e+1],r=o[e+2],c=.2126*n+.7152*i+.0722*r;o[e]=o[e+1]=o[e+2]=c*a}return t}function drawBackground(t,o){t.fillStyle=o,t.fillRect(0,0,canvas.width,canvas.height)}function drawCenterPlayButton(t,o){t.fillStyle=""+o;var a={width:35,height:50};a.points={top:{x:(canvas.width-a.width)/2,y:(canvas.height-a.height)/2},bottom:{x:(canvas.width-a.width)/2,y:(canvas.height+a.height)/2},right:{x:(canvas.width+a.width)/2,y:canvas.height/2}},controlElements.push({type:"start",top:a.points.top.y,left:a.points.top.x,bottom:a.points.bottom.y,right:a.points.right.x}),t.beginPath(),t.moveTo(a.points.top.x,a.points.top.y),t.lineTo(a.points.bottom.x,a.points.bottom.y),t.lineTo(a.points.right.x,a.points.right.y),t.fill()}function drawControls(t,o){t.fillStyle=""+o;t.fillRect(80,canvas.height-controlTopPoint,controlRectWidth,controlRectHeight),t.fillRect(110,canvas.height-controlTopPoint,controlRectWidth,controlRectHeight)}function drawSkratches(t){var o=Math.random()*(.8-.2);t.strokeStyle="rgba(255, 255, 255, "+o+")";var a=Math.floor(101*Math.random());if(a-=98,a>0)for(var e=0;e<a;e++)skratch(t)}function skratch(t){t.beginPath();var o={x:Math.floor(Math.random()*(canvas.width-1)),y:Math.floor(Math.random()*(canvas.height-1))},a={x:o.x,y:Math.floor(Math.random()*(canvas.height-o.y))};t.moveTo(o.x,o.y),t.lineTo(a.x,a.y),t.stroke()}function startDrawLoop(){console.log("start draw"),loopId||(loopId=setInterval(drawLoop,fps))}function stopDrawLoop(){console.log("stop draw"),loopId&&(clearInterval(loopId),loopId=void 0)}function drawLoop(){var t=canvas.getContext("2d");t.clearRect(0,0,canvas.width,canvas.height),console.log("draw"),t.drawImage(video,0,0,video.width,video.height);var o=t.getImageData(0,0,canvas.width,canvas.height),a=grayAndGrain(o);t.putImageData(a,0,0),drawSkratches(t)}function parseSrt(t){var o={sec:1e3,min:60,hr:60},a=t.split("\n\n"),e=a.map(function(t){var a={},e=t.split("\n");a.number=parseInt(e[0]);var n=e[1].split(" --> "),i=n[0].split(":"),r=parseInt(i[2].split(",").join("")),c=parseInt(i[1])*o.min*o.sec,s=parseInt(i[0])*o.hr*o.min*o.sec;i=r+c+s,a.startTime=i;var l=n[1].split(":"),h=parseInt(l[2].split(",").join("")),d=parseInt(l[1])*o.min*o.sec,p=parseInt(l[0])*o.hr*o.min*o.sec;return l=h+d+p,a.endTime=l,a.timeLength=l-i,e.splice(0,2),a.content=e,a});return e}var video=document.querySelector(".player__video"),canvas=document.querySelector(".player__canvas"),audio=document.querySelector(".player__audio"),controlBottomPoint=10,controlTopPoint=60,controlTrianglePoint=35,controlRectHeight=50,controlRectWidth=20,fps=1e3/60,controlElements=[];document.addEventListener("DOMContentLoaded",function(){canvasStartState(),canvas.addEventListener("click",function(t){var o=t.pageX-t.target.offsetLeft,a=t.pageY-t.target.offsetTop;controlElements.some(function(t){o<t.right&&o>t.left&&a>t.top&&a<t.bottom&&("pause"==t.type?(video.pause(),audio.pause(),stopDrawLoop(),controlElements=[],createStartElement()):(video.play(),audio.play(),createPauseElement()))})})},!1),video.addEventListener("play",function(){startDrawLoop()},!1);var loopId=void 0;
//# sourceMappingURL=data:application/json;base64,
