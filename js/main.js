"use strict";function showPlayer(){linksEl.classList.add("hidden"),playerEl.classList.remove("hidden")}function initCanvas(){canvas=document.querySelector(".player__canvas"),canvasStartState(),canvas.addEventListener("click",function(t){var e=t.pageX-t.target.offsetLeft,a=t.pageY-t.target.offsetTop;controlElements.some(function(t){e<t.right&&e>t.left&&a>t.top&&a<t.bottom&&("pause"==t.type?(isSubtitleShown?stopSubTimeout():(video.pause(),stopDrawLoop()),audio.pause(),controlElements=[],createStartElement()):(isSubtitleShown?startSubTimeout():video.play(),audio.play(),createPauseElement()))})},!1)}function createStartElement(){controlElements=[{type:"start",top:0,left:0,right:canvas.width,bottom:canvas.height}]}function createPauseElement(){controlElements=[{type:"pause",top:0,left:0,right:canvas.width,bottom:canvas.height}]}function canvasStartState(){video.width=canvas.width=video.offsetWidth,video.height=canvas.height=video.offsetHeight;var t=canvas.getContext("2d");drawBackground(t,canvasBgColor),drawCenterPlayButton(t,canvasControlsColor)}function grayAndGrain(t){for(var e=t.data,a=void 0,i=0;i<e.length;i+=4){a=Math.random()+1;var o=e[i],n=e[i+1],s=e[i+2],r=.2126*o+.7152*n+.0722*s;e[i]=e[i+1]=e[i+2]=r*a}return t}function drawBackground(t,e){t.fillStyle=e,t.fillRect(0,0,canvas.width,canvas.height)}function drawCenterPlayButton(t,e){t.fillStyle=""+e;var a={width:35,height:50};a.points={top:{x:(canvas.width-a.width)/2,y:(canvas.height-a.height)/2},bottom:{x:(canvas.width-a.width)/2,y:(canvas.height+a.height)/2},right:{x:(canvas.width+a.width)/2,y:canvas.height/2}},controlElements.push({type:"start",top:a.points.top.y,left:a.points.top.x,bottom:a.points.bottom.y,right:a.points.right.x}),t.beginPath(),t.moveTo(a.points.top.x,a.points.top.y),t.lineTo(a.points.bottom.x,a.points.bottom.y),t.lineTo(a.points.right.x,a.points.right.y),t.fill()}function drawSkratches(){var t=Math.random()*(.8-.2);ctx.strokeStyle="rgba(255, 255, 255, "+t+")";var e=Math.floor(101*Math.random());if(e-=98,e>0)for(var a=0;a<e;a++)skratch()}function skratch(){ctx.beginPath();var t={x:Math.floor(Math.random()*(canvas.width-1)),y:Math.floor(Math.random()*(canvas.height-1))},e={x:t.x,y:Math.floor(Math.random()*(canvas.height-t.y))};ctx.moveTo(t.x,t.y),ctx.lineTo(e.x,e.y),ctx.stroke()}function startDrawLoop(){loopId||isSubtitleShown?"undefined"!=typeof subtitles[subtitleIndex]&&(subTimeout=setTimeout(hideSub,subtitles[subtitleIndex].timeLength/2)):loopId=setInterval(drawLoop,fps)}function stopDrawLoop(){loopId&&(clearInterval(loopId),loopId=void 0)}function drawLoop(){ctx.clearRect(0,0,canvas.width,canvas.height),ctx.drawImage(video,0,0,video.width,video.height);var t=ctx.getImageData(0,0,canvas.width,canvas.height),e=grayAndGrain(t);ctx.putImageData(e,0,0),drawSkratches()}function _onInputChange(t){var e=new FileReader;switch(!0){case t.target.classList.contains("links-form__video"):e.readAsDataURL(t.target.files[0]),e.addEventListener("load",function(t){createVideo(e.result)});break;case t.target.classList.contains("links-form__sub"):e.readAsText(t.target.files[0]),e.addEventListener("load",function(t){subtitles=parseSrt(e.result)});break;case t.target.classList.contains("links-form__audio"):e.readAsDataURL(t.target.files[0]),e.addEventListener("load",function(t){createAudio(e.result)})}}function checkInputs(t){t.preventDefault();var e=document.querySelectorAll(".links-form__input"),a=!0;e.forEach(function(t){""===t.value&&(a=!1)}),a&&(showPlayer(),initCanvas())}function createVideo(t){video=document.createElement("video"),video.src=t,video.defaultMuted=!0,video.classList.add("player__video"),video.width=videoWidth,video.height=videoHeight,document.querySelector(".hidden-elements").appendChild(video),video.addEventListener("play",startDrawLoop,!1),video.addEventListener("pause",stopDrawLoop,!1),video.addEventListener("timeupdate",function(t){var e=(1e3*t.target.currentTime).toFixed();"undefined"!=typeof subtitles[subtitleIndex]&&e>=subtitles[subtitleIndex].endTime&&(isSubtitleShown||(showSub(subtitles[subtitleIndex]),startSubTimeout()))}),video.addEventListener("ended",function(t){audio.pause(),stopDrawLoop()},!1)}function createAudio(t){audio=document.createElement("audio"),audio.src=t,audio.autoplay=!1,audio.classList.add("player__audio"),document.querySelector(".hidden-elements").appendChild(audio)}function parseSrt(t){var e={sec:1e3,min:60,hr:60},a=t.split("\n\n"),i=a.map(function(t){var a={},i=t.split("\n");a.number=parseInt(i[0]);var o=i[1].split(" --> "),n=o[0].split(":"),s=parseInt(n[2].split(",").join("")),r=parseInt(n[1])*e.min*e.sec,d=parseInt(n[0])*e.hr*e.min*e.sec;n=s+r+d,a.startTime=n;var c=o[1].split(":"),l=parseInt(c[2].split(",").join("")),u=parseInt(c[1])*e.min*e.sec,h=parseInt(c[0])*e.hr*e.min*e.sec;return c=l+u+h,a.endTime=c,a.timeLength=c-n,i.splice(0,2),a.content=i,a});return i}function showSub(t){isSubtitleShown=!0,video.pause(),drawSub(t)}function drawSub(t){ctx.fillStyle="black",ctx.fillRect(0,0,canvas.width,canvas.height),ctx.fillStyle="white",ctx.font="1.5em Oranienbaum, serif";var e=24*t.content.length+12*(t.content.length-1),a=(canvas.height-e)/2;t.content.forEach(function(t,e){var i=a+24*e+12*e,o=.1*canvas.width;ctx.fillText(t,o,i)})}function hideSub(){isSubtitleShown&&(isSubtitleShown=!1,subtitleIndex++,video.play()),clearTimeout(subTimeout),subTimeout=void 0,controlElements=[],createPauseElement()}function stopSubTimeout(){subTimeout&&(clearTimeout(subTimeout),subTimeout=void 0)}function startSubTimeout(){subTimeout=setTimeout(hideSub,subtitles[subtitleIndex].timeLength)}var canvasBgColor="#000",canvasControlsColor="#fff",canvasFontColor="#fff",canvasFontSize=24,canvasLineHeight=12,linksForm=document.querySelector(".links-form"),linksEl=document.querySelector(".links"),playerEl=document.querySelector(".player"),submitEl=document.querySelector(".links-form__submit"),fps=1e3/60,video=void 0,canvas=void 0,audio=void 0;canvas=document.querySelector(".player__canvas");var controlElements=[],reader=new FileReader,srt=void 0,videoWidth=700,videoHeight=400,isSubtitleShown=!1,subtitles=void 0,subTimeout=void 0,subtitleIndex=0,ctx=canvas.getContext("2d"),loopId=void 0;linksForm.addEventListener("change",_onInputChange,!1),submitEl.addEventListener("click",checkInputs,!1);
//# sourceMappingURL=data:application/json;base64,
